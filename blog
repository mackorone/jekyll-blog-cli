#!/usr/bin/env python3

import argcomplete
import argparse
import datetime
import os
import subprocess


def strip_date_prefix(filename):
    return filename[len("yyyy-mm-dd-"):]


def prepend_date_prefix(filename):
    date = datetime.date.today().isoformat()
    return date + "-" + filename


def get_editor():
    return os.getenv("EDITOR")


def get_blog_root():
    return os.getenv("BLOG_ROOT")


def get_posts_root():
    return os.path.join(get_blog_root(), "_posts")


def get_file_paths(directory):
    filenames = os.listdir(directory)
    return [os.path.join(directory, f) for f in filenames]


def get_path_from_title(directory, title):
    for path in get_file_paths(directory):
        filename = os.path.basename(path)
        if (
            filename.endswith(title) or
            filename.endswith(title + ".md")
        ):
            return path
    return None


def FileCompleter(**kwargs):
    filenames = os.listdir(get_posts_root())
    return [strip_date_prefix(f) for f in filenames]


def list_(args):
    posts_root = get_posts_root()
    for name in get_file_paths(posts_root):
        print(os.path.basename(name))


def open_(args):
    filename = args.FILE
    posts_root = get_posts_root()
    path = get_path_from_title(posts_root, filename)
    if not path:
        path = touch(args)
    subprocess.call([get_editor(), path])


def touch(args):
    filename = args.FILE
    posts_root = get_posts_root()
    path = get_path_from_title(posts_root, filename)
    if path:
        old_name = os.path.basename(path)
        stripped = strip_date_prefix(old_name)
        new_name = prepend_date_prefix(stripped)
        old_path = os.path.join(posts_root, old_name)
        new_path = os.path.join(posts_root, new_name)
        os.rename(old_path, new_path)
    else:
        new_name = prepend_date_prefix(args.FILE)
        if not new_name.endswith(".md"):
            new_name += ".md"
        new_path = os.path.join(posts_root, new_name)
        with open(new_path, "w") as f:
            pass
    return new_path


def serve(args):
    os.chdir(get_blog_root())
    subprocess.call(["bundle", "exec", "jekyll", "serve"])


def check(args):
    os.chdir(get_blog_root())
    subprocess.call(["htmlproofer", "_site"])


def main():
    parser = argparse.ArgumentParser(
        description="A small CLI for managing Jekyll blog posts"
    )
    subparsers = parser.add_subparsers(dest="command")

    list_parser = subparsers.add_parser("list", add_help=False)
    list_parser.set_defaults(func=list_)

    open_parser = subparsers.add_parser("open", add_help=False)
    open_parser.add_argument("FILE").completer = FileCompleter
    open_parser.set_defaults(func=open_)

    touch_parser = subparsers.add_parser("touch", add_help=False)
    touch_parser.add_argument("FILE").completer = FileCompleter
    touch_parser.set_defaults(func=touch)

    serve_parser = subparsers.add_parser("serve", add_help=False)
    serve_parser.set_defaults(func=serve)

    check_parser = subparsers.add_parser("check", add_help=False)
    check_parser.set_defaults(func=check)

    argcomplete.autocomplete(parser)
    try:
        args = parser.parse_args()
        args.func(args)
    except Exception:
        parser.print_help()


if __name__ == "__main__":
    main()
